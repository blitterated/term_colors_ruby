#! /bin/bash

# From Wikipedia:
# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
#
# ESC[38;5;⟨n⟩m Select foreground color      where n is a number from the table below
# ESC[48;5;⟨n⟩m Select background color
#   0-  7:  standard colors (as in ESC [ 30–37 m)
#   8- 15:  high intensity colors (as in ESC [ 90–97 m)
#  16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
# 232-255:  grayscale from dark to light in 24 steps
#
# Algorithm for turning R, G, B into ANSI color number:
# 16 + (36 × r) + (6 × g) + b

function cycle_216_8bit_colors_rgb () {

  # declaring these vars as local is critical since this function
  # is entered at more than one level in the call stack.
  local callback x y z

  callback=$1

  for x in {0..5} ; do # color cube x-coord color
    for y in {0..5} ; do # color cube y-coord color
      for z in {0..5} ; do # color cube z-coord color
        eval "$callback $x $y $z"
      done
    done
  done
}

function calculate_color_number {
  r=$1; g=$2; b=$3;

  color_number=$((16 + (36 * $r) + (6 * $g) + $b))
}

function show_bg_color_with_fg_color () {
  fg_x=$1; fg_y=$2; fg_z=$3;
  bg_x=$4; bg_y=$5; bg_z=$6;

  local color_number=nothing
  calculate_color_number fg_x fg_y fg_z
  fg_color=$color_number
  calculate_color_number bg_x bg_y bg_z
  bg_color=$color_number

  # Display the bg and fg color
  printf "\e[48;5;%s;38;5;%sm  %3s  %3s  \e[0m" $bg_color $fg_color $bg_color $fg_color

  # Output a newline every 6th change to stay within the same color cube slice
  if [ $((($bg_color + 1) % 6)) = 4 ] ; then printf '\n'; fi
}

function show_bg_color_for_each_fg_color () {
  fg_x=$1; fg_y=$2; fg_z=$3;

  cycle_216_8bit_colors_rgb "show_bg_color_with_fg_color $fg_x $fg_y $fg_z"
}

function show_colors_fg_bg_rgb () {
  cycle_216_8bit_colors_rgb "show_bg_color_for_each_fg_color"
}

show_colors_fg_bg_rgb
